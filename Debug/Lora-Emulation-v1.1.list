
Lora-Emulation-v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080035a0  080035a0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a0  080035a0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080035a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001370  20000030  080035d4  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  080035d4  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9b3  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259e  00000000  00000000  0002ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00031dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c60  00000000  00000000  00032af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f554  00000000  00000000  0004a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a142  00000000  00000000  00059ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000e3e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003540 	.word	0x08003540

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003540 	.word	0x08003540

0800014c <Process_Rx_RF>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_Rx_RF(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000152:	af3e      	add	r7, sp, #248	; 0xf8
	if(!ring_buffer_is_empty(&ring_buf_rf)){
 8000154:	483b      	ldr	r0, [pc, #236]	; (8000244 <Process_Rx_RF+0xf8>)
 8000156:	f000 fb1e 	bl	8000796 <ring_buffer_is_empty>
 800015a:	4603      	mov	r3, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d16b      	bne.n	8000238 <Process_Rx_RF+0xec>
		Packet_t tmp;
		ring_buffer_dequeue(&ring_buf_rf, &tmp);
 8000160:	1d3b      	adds	r3, r7, #4
 8000162:	4619      	mov	r1, r3
 8000164:	4837      	ldr	r0, [pc, #220]	; (8000244 <Process_Rx_RF+0xf8>)
 8000166:	f000 fb77 	bl	8000858 <ring_buffer_dequeue>
		switch(tmp.cmdWord)
 800016a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800016e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000172:	785b      	ldrb	r3, [r3, #1]
 8000174:	2b04      	cmp	r3, #4
 8000176:	d85d      	bhi.n	8000234 <Process_Rx_RF+0xe8>
 8000178:	a201      	add	r2, pc, #4	; (adr r2, 8000180 <Process_Rx_RF+0x34>)
 800017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017e:	bf00      	nop
 8000180:	08000195 	.word	0x08000195
 8000184:	080001b5 	.word	0x080001b5
 8000188:	080001d5 	.word	0x080001d5
 800018c:	080001f5 	.word	0x080001f5
 8000190:	08000215 	.word	0x08000215
		{
		case CONNECT: // blink led 3 s
			processConnect(tmp);
 8000194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000198:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 800019c:	4668      	mov	r0, sp
 800019e:	f104 0310 	add.w	r3, r4, #16
 80001a2:	22f4      	movs	r2, #244	; 0xf4
 80001a4:	4619      	mov	r1, r3
 80001a6:	f003 f9b5 	bl	8003514 <memcpy>
 80001aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001ae:	f000 fbcd 	bl	800094c <processConnect>
			break;
 80001b2:	e040      	b.n	8000236 <Process_Rx_RF+0xea>
		case READ_CONFIG:
			processReadConfig(tmp);
 80001b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80001b8:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80001bc:	4668      	mov	r0, sp
 80001be:	f104 0310 	add.w	r3, r4, #16
 80001c2:	22f4      	movs	r2, #244	; 0xf4
 80001c4:	4619      	mov	r1, r3
 80001c6:	f003 f9a5 	bl	8003514 <memcpy>
 80001ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001ce:	f000 fbe1 	bl	8000994 <processReadConfig>
			break;
 80001d2:	e030      	b.n	8000236 <Process_Rx_RF+0xea>
		case CONFIG:
			processConfig(tmp);
 80001d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80001d8:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80001dc:	4668      	mov	r0, sp
 80001de:	f104 0310 	add.w	r3, r4, #16
 80001e2:	22f4      	movs	r2, #244	; 0xf4
 80001e4:	4619      	mov	r1, r3
 80001e6:	f003 f995 	bl	8003514 <memcpy>
 80001ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001ee:	f000 fbfb 	bl	80009e8 <processConfig>
			break;
 80001f2:	e020      	b.n	8000236 <Process_Rx_RF+0xea>
		case CHANGE_MODE:
			processSendDataRF(tmp);
 80001f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80001f8:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80001fc:	4668      	mov	r0, sp
 80001fe:	f104 0310 	add.w	r3, r4, #16
 8000202:	22f4      	movs	r2, #244	; 0xf4
 8000204:	4619      	mov	r1, r3
 8000206:	f003 f985 	bl	8003514 <memcpy>
 800020a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800020e:	f000 fc5d 	bl	8000acc <processSendDataRF>
			break;
 8000212:	e010      	b.n	8000236 <Process_Rx_RF+0xea>
		case SEND_DATA:
			processSendDataNC(tmp);
 8000214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000218:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 800021c:	4668      	mov	r0, sp
 800021e:	f104 0310 	add.w	r3, r4, #16
 8000222:	22f4      	movs	r2, #244	; 0xf4
 8000224:	4619      	mov	r1, r3
 8000226:	f003 f975 	bl	8003514 <memcpy>
 800022a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800022e:	f000 fc65 	bl	8000afc <processSendDataNC>
			break;
 8000232:	e000      	b.n	8000236 <Process_Rx_RF+0xea>
		default:
			break;
 8000234:	bf00      	nop
		}
		// handle data received
	}
	return;
 8000236:	bf00      	nop
 8000238:	bf00      	nop
}
 800023a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800023e:	46bd      	mov	sp, r7
 8000240:	bd90      	pop	{r4, r7, pc}
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000

08000248 <Process_RX_Nc>:
/* process data received from lora
 * on flag send data processed to node controller
 *
 * */
void Process_RX_Nc(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800024e:	af3e      	add	r7, sp, #248	; 0xf8
	if(!ring_buffer_is_empty(&ring_buf_nc)){
 8000250:	480f      	ldr	r0, [pc, #60]	; (8000290 <Process_RX_Nc+0x48>)
 8000252:	f000 faa0 	bl	8000796 <ring_buffer_is_empty>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d114      	bne.n	8000286 <Process_RX_Nc+0x3e>
		Packet_t tmp;
		ring_buffer_dequeue(&ring_buf_nc, &tmp);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4619      	mov	r1, r3
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <Process_RX_Nc+0x48>)
 8000262:	f000 faf9 	bl	8000858 <ring_buffer_dequeue>
		processSendDataRF(tmp);
 8000266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800026a:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 800026e:	4668      	mov	r0, sp
 8000270:	f104 0310 	add.w	r3, r4, #16
 8000274:	22f4      	movs	r2, #244	; 0xf4
 8000276:	4619      	mov	r1, r3
 8000278:	f003 f94c 	bl	8003514 <memcpy>
 800027c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000280:	f000 fc24 	bl	8000acc <processSendDataRF>
	}
	return;
 8000284:	bf00      	nop
 8000286:	bf00      	nop
}
 8000288:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800028c:	46bd      	mov	sp, r7
 800028e:	bd90      	pop	{r4, r7, pc}
 8000290:	20000010 	.word	0x20000010

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b089      	sub	sp, #36	; 0x24
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fe57 	bl	8000f4c <HAL_Init>

  /* USER CODE BEGIN Init */
  User_Init();
 800029e:	f000 f959 	bl	8000554 <User_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f841 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f8cf 	bl	8000448 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002aa:	f000 f879 	bl	80003a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002ae:	f000 f8a1 	bl	80003f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  if(MODULE_CONFIG.baudrate != huart2.Init.BaudRate)
//  {
//	  Uart_SetBaudrate(MODULE_CONFIG.baudrate);
//  }
  char start1[]= "start RF!\n";
 80002b2:	4a17      	ldr	r2, [pc, #92]	; (8000310 <main+0x7c>)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ba:	c303      	stmia	r3!, {r0, r1}
 80002bc:	801a      	strh	r2, [r3, #0]
 80002be:	3302      	adds	r3, #2
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	701a      	strb	r2, [r3, #0]
  char start2[]= "start UART!\n";
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <main+0x80>)
 80002c6:	1d3c      	adds	r4, r7, #4
 80002c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ca:	c407      	stmia	r4!, {r0, r1, r2}
 80002cc:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)start1, 11, 1000);
 80002ce:	f107 0114 	add.w	r1, r7, #20
 80002d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d6:	220b      	movs	r2, #11
 80002d8:	480f      	ldr	r0, [pc, #60]	; (8000318 <main+0x84>)
 80002da:	f002 facf 	bl	800287c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)start2, 13, 1000);
 80002de:	1d39      	adds	r1, r7, #4
 80002e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e4:	220d      	movs	r2, #13
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <main+0x88>)
 80002e8:	f002 fac8 	bl	800287c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &rf_rx_payload, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	490c      	ldr	r1, [pc, #48]	; (8000320 <main+0x8c>)
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <main+0x84>)
 80002f2:	f002 fb46 	bl	8002982 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &nc_rx_payload, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	490a      	ldr	r1, [pc, #40]	; (8000324 <main+0x90>)
 80002fa:	4808      	ldr	r0, [pc, #32]	; (800031c <main+0x88>)
 80002fc:	f002 fb41 	bl	8002982 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readMode_Task();
 8000300:	f000 f9c0 	bl	8000684 <readMode_Task>
	  Process_Rx_RF();
 8000304:	f7ff ff22 	bl	800014c <Process_Rx_RF>
	  Process_RX_Nc();
 8000308:	f7ff ff9e 	bl	8000248 <Process_RX_Nc>
	  readMode_Task();
 800030c:	e7f8      	b.n	8000300 <main+0x6c>
 800030e:	bf00      	nop
 8000310:	08003558 	.word	0x08003558
 8000314:	08003564 	.word	0x08003564
 8000318:	20000050 	.word	0x20000050
 800031c:	20000098 	.word	0x20000098
 8000320:	200000e1 	.word	0x200000e1
 8000324:	20000a05 	.word	0x20000a05

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f8fa 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fbb2 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036a:	f000 fa0f 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fe20 	bl	8001fcc <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f9fb 	bl	800078c <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART1_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d8:	f002 fa00 	bl	80027dc <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f9d3 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000050 	.word	0x20000050
 80003f0:	40013800 	.word	0x40013800

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART2_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800042c:	f002 f9d6 	bl	80027dc <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f9a9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000098 	.word	0x20000098
 8000444:	40004400 	.word	0x40004400

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b39      	ldr	r3, [pc, #228]	; (8000544 <MX_GPIO_Init+0xfc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a38      	ldr	r2, [pc, #224]	; (8000544 <MX_GPIO_Init+0xfc>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b36      	ldr	r3, [pc, #216]	; (8000544 <MX_GPIO_Init+0xfc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b33      	ldr	r3, [pc, #204]	; (8000544 <MX_GPIO_Init+0xfc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a32      	ldr	r2, [pc, #200]	; (8000544 <MX_GPIO_Init+0xfc>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b30      	ldr	r3, [pc, #192]	; (8000544 <MX_GPIO_Init+0xfc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <MX_GPIO_Init+0xfc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <MX_GPIO_Init+0xfc>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_GPIO_Init+0xfc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <MX_GPIO_Init+0xfc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a26      	ldr	r2, [pc, #152]	; (8000544 <MX_GPIO_Init+0xfc>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xfc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	4821      	ldr	r0, [pc, #132]	; (8000548 <MX_GPIO_Init+0x100>)
 80004c4:	f001 facf 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX_GPIO_Port, AUX_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <MX_GPIO_Init+0x104>)
 80004ce:	f001 faca 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004dc:	2302      	movs	r3, #2
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4817      	ldr	r0, [pc, #92]	; (8000548 <MX_GPIO_Init+0x100>)
 80004ec:	f001 f920 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 80004f0:	2360      	movs	r3, #96	; 0x60
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <MX_GPIO_Init+0x104>)
 8000504:	f001 f914 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2302      	movs	r3, #2
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0x104>)
 8000520:	f001 f906 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <MX_GPIO_Init+0x108>)
 8000538:	f001 f8fa 	bl	8001730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	40011000 	.word	0x40011000
 800054c:	40010800 	.word	0x40010800
 8000550:	40010c00 	.word	0x40010c00

08000554 <User_Init>:

/* USER CODE BEGIN 4 */
void User_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	FLASH_read();
 8000558:	f000 f9aa 	bl	80008b0 <FLASH_read>
	nc_rx_buf.cmdWord = SEND_DATA;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <User_Init+0x1c>)
 800055e:	2204      	movs	r2, #4
 8000560:	705a      	strb	r2, [r3, #1]
	nc_rx_buf.module = MODULE_CONFIG.type;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <User_Init+0x20>)
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	4b02      	ldr	r3, [pc, #8]	; (8000570 <User_Init+0x1c>)
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000a08 	.word	0x20000a08
 8000574:	2000004c 	.word	0x2000004c

08000578 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	b0c1      	sub	sp, #260	; 0x104
 800057c:	af3e      	add	r7, sp, #248	; 0xf8
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &rf_rx_payload, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4935      	ldr	r1, [pc, #212]	; (8000658 <HAL_UART_RxCpltCallback+0xe0>)
 8000584:	4835      	ldr	r0, [pc, #212]	; (800065c <HAL_UART_RxCpltCallback+0xe4>)
 8000586:	f002 f9fc 	bl	8002982 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &nc_rx_payload, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	4934      	ldr	r1, [pc, #208]	; (8000660 <HAL_UART_RxCpltCallback+0xe8>)
 800058e:	4835      	ldr	r0, [pc, #212]	; (8000664 <HAL_UART_RxCpltCallback+0xec>)
 8000590:	f002 f9f7 	bl	8002982 <HAL_UART_Receive_IT>
	if(huart->Instance == huart1.Instance)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b30      	ldr	r3, [pc, #192]	; (800065c <HAL_UART_RxCpltCallback+0xe4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	d124      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x72>
	 {
//	   HAL_UART_Receive_IT(&huart1, &rf_rx_payload, 1);
	   rf_rx_buf[idx1++] = rf_rx_payload;
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <HAL_UART_RxCpltCallback+0xf0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	1c5a      	adds	r2, r3, #1
 80005a6:	b2d1      	uxtb	r1, r2
 80005a8:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <HAL_UART_RxCpltCallback+0xf0>)
 80005aa:	7011      	strb	r1, [r2, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <HAL_UART_RxCpltCallback+0xe0>)
 80005b0:	7819      	ldrb	r1, [r3, #0]
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <HAL_UART_RxCpltCallback+0xf4>)
 80005b4:	5499      	strb	r1, [r3, r2]
	   if(rf_rx_payload == BYTE_STOP || idx1 == LENGTH_BUFFER){ //0x23 ='#'
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <HAL_UART_RxCpltCallback+0xe0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b23      	cmp	r3, #35	; 0x23
 80005bc:	d115      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x72>
		   ring_buffer_queue(&ring_buf_rf,  *( Packet_t *) (rf_rx_buf));
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <HAL_UART_RxCpltCallback+0xf4>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4616      	mov	r6, r2
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	4615      	mov	r5, r2
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	4614      	mov	r4, r2
 80005cc:	4668      	mov	r0, sp
 80005ce:	330c      	adds	r3, #12
 80005d0:	22f8      	movs	r2, #248	; 0xf8
 80005d2:	4619      	mov	r1, r3
 80005d4:	f002 ff9e 	bl	8003514 <memcpy>
 80005d8:	4631      	mov	r1, r6
 80005da:	462a      	mov	r2, r5
 80005dc:	4623      	mov	r3, r4
 80005de:	4824      	ldr	r0, [pc, #144]	; (8000670 <HAL_UART_RxCpltCallback+0xf8>)
 80005e0:	f000 f903 	bl	80007ea <ring_buffer_queue>
		   idx1 = 0;
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <HAL_UART_RxCpltCallback+0xf0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	   }
	 }
	if(huart->Instance == huart2.Instance)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <HAL_UART_RxCpltCallback+0xec>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d12b      	bne.n	800064e <HAL_UART_RxCpltCallback+0xd6>
	{
//		HAL_UART_Receive_IT(&huart2, &nc_rx_payload, 1);
		nc_rx_buf.data[idx2++] = nc_rx_payload;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_UART_RxCpltCallback+0xfc>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	b2d1      	uxtb	r1, r2
 80005fe:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_UART_RxCpltCallback+0xfc>)
 8000600:	7011      	strb	r1, [r2, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_UART_RxCpltCallback+0xe8>)
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_RxCpltCallback+0x100>)
 800060a:	440b      	add	r3, r1
 800060c:	711a      	strb	r2, [r3, #4]
		if(nc_rx_payload == BYTE_STOP || idx2 == LENGTH_BUFFER){ //0x23 ='#'
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_UART_RxCpltCallback+0xe8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b23      	cmp	r3, #35	; 0x23
 8000614:	d11b      	bne.n	800064e <HAL_UART_RxCpltCallback+0xd6>
			// reset index va copy buffer vao ring buffer
			nc_rx_buf.module = MODULE_CONFIG.type;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_UART_RxCpltCallback+0x104>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_UART_RxCpltCallback+0x100>)
 800061c:	701a      	strb	r2, [r3, #0]
			nc_rx_buf.cmdWord = SEND_DATA;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_UART_RxCpltCallback+0x100>)
 8000620:	2204      	movs	r2, #4
 8000622:	705a      	strb	r2, [r3, #1]
			nc_rx_buf.dataLength = idx2;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_UART_RxCpltCallback+0xfc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_UART_RxCpltCallback+0x100>)
 800062c:	805a      	strh	r2, [r3, #2]
			idx2 = 0;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_UART_RxCpltCallback+0xfc>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
			ring_buffer_queue(&ring_buf_nc,  nc_rx_buf);
 8000634:	4c10      	ldr	r4, [pc, #64]	; (8000678 <HAL_UART_RxCpltCallback+0x100>)
 8000636:	4668      	mov	r0, sp
 8000638:	f104 030c 	add.w	r3, r4, #12
 800063c:	22f8      	movs	r2, #248	; 0xf8
 800063e:	4619      	mov	r1, r3
 8000640:	f002 ff68 	bl	8003514 <memcpy>
 8000644:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <HAL_UART_RxCpltCallback+0x108>)
 800064a:	f000 f8ce 	bl	80007ea <ring_buffer_queue>
		}
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000656:	bf00      	nop
 8000658:	200000e1 	.word	0x200000e1
 800065c:	20000050 	.word	0x20000050
 8000660:	20000a05 	.word	0x20000a05
 8000664:	20000098 	.word	0x20000098
 8000668:	200000e0 	.word	0x200000e0
 800066c:	200000e4 	.word	0x200000e4
 8000670:	20000000 	.word	0x20000000
 8000674:	20000a04 	.word	0x20000a04
 8000678:	20000a08 	.word	0x20000a08
 800067c:	2000004c 	.word	0x2000004c
 8000680:	20000010 	.word	0x20000010

08000684 <readMode_Task>:

void readMode_Task()
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800068a:	af3e      	add	r7, sp, #248	; 0xf8
	M0 = HAL_GPIO_ReadPin(GPIOA, M0_Pin);
 800068c:	2120      	movs	r1, #32
 800068e:	4830      	ldr	r0, [pc, #192]	; (8000750 <readMode_Task+0xcc>)
 8000690:	f001 f9d2 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <readMode_Task+0xd0>)
 800069a:	701a      	strb	r2, [r3, #0]
	M1 = HAL_GPIO_ReadPin(GPIOA, M1_Pin);
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	482c      	ldr	r0, [pc, #176]	; (8000750 <readMode_Task+0xcc>)
 80006a0:	f001 f9ca 	bl	8001a38 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <readMode_Task+0xd4>)
 80006aa:	701a      	strb	r2, [r3, #0]

	if(M0 == 0 && M1 == 0) cur_mode = NORMAL;
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <readMode_Task+0xd0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d106      	bne.n	80006c2 <readMode_Task+0x3e>
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <readMode_Task+0xd4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <readMode_Task+0x3e>
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <readMode_Task+0xd8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	if(M0 == 0 && M1 == 1) cur_mode = WAKE_UP;
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <readMode_Task+0xd0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d106      	bne.n	80006d8 <readMode_Task+0x54>
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <readMode_Task+0xd4>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d102      	bne.n	80006d8 <readMode_Task+0x54>
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <readMode_Task+0xd8>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
	if(M0 == 1 && M1 == 0) cur_mode = POWER_SAVING;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <readMode_Task+0xd0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d106      	bne.n	80006ee <readMode_Task+0x6a>
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <readMode_Task+0xd4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <readMode_Task+0x6a>
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <readMode_Task+0xd8>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	701a      	strb	r2, [r3, #0]
	if(M0 == 1 && M1 == 1) cur_mode = SLEEP;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <readMode_Task+0xd0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d106      	bne.n	8000704 <readMode_Task+0x80>
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <readMode_Task+0xd4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d102      	bne.n	8000704 <readMode_Task+0x80>
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <readMode_Task+0xd8>)
 8000700:	2203      	movs	r2, #3
 8000702:	701a      	strb	r2, [r3, #0]

	if(pre_mode != cur_mode)
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <readMode_Task+0xdc>)
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <readMode_Task+0xd8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d01a      	beq.n	8000746 <readMode_Task+0xc2>
	{
		Packet_t packet = processChangeMode();
 8000710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f991 	bl	8000a40 <processChangeMode>
		ring_buffer_queue(&ring_buf_rf, packet);
 800071e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000722:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 8000726:	4668      	mov	r0, sp
 8000728:	f104 030c 	add.w	r3, r4, #12
 800072c:	22f8      	movs	r2, #248	; 0xf8
 800072e:	4619      	mov	r1, r3
 8000730:	f002 fef0 	bl	8003514 <memcpy>
 8000734:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <readMode_Task+0xe0>)
 800073a:	f000 f856 	bl	80007ea <ring_buffer_queue>
		pre_mode = cur_mode;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <readMode_Task+0xd8>)
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <readMode_Task+0xdc>)
 8000744:	701a      	strb	r2, [r3, #0]
	}
}
 8000746:	bf00      	nop
 8000748:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40010800 	.word	0x40010800
 8000754:	2000132c 	.word	0x2000132c
 8000758:	2000132d 	.word	0x2000132d
 800075c:	2000132e 	.word	0x2000132e
 8000760:	2000132f 	.word	0x2000132f
 8000764:	20000000 	.word	0x20000000

08000768 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d101      	bne.n	800077e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077a:	f000 fbfd 	bl	8000f78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40012c00 	.word	0x40012c00

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>

08000796 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline u8 ring_buffer_is_empty(ring_buffer_t *buffer) {
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68da      	ldr	r2, [r3, #12]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline u8 ring_buffer_is_full(ring_buffer_t *buffer) {
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	401a      	ands	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	bf0c      	ite	eq
 80007da:	2301      	moveq	r3, #1
 80007dc:	2300      	movne	r3, #0
 80007de:	b2db      	uxtb	r3, r3
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <ring_buffer_queue>:
  buffer->buffer_mask = buf_size - 1;
  buffer->tail_index = 0;
  buffer->head_index = 0;
}

void ring_buffer_queue(ring_buffer_t *buffer, data_buffer_t data) {
 80007ea:	b084      	sub	sp, #16
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	f107 0014 	add.w	r0, r7, #20
 80007f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffdc 	bl	80007ba <ring_buffer_is_full>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	401a      	ands	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	609a      	str	r2, [r3, #8]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	4613      	mov	r3, r2
 8000822:	019b      	lsls	r3, r3, #6
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	4618      	mov	r0, r3
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	4619      	mov	r1, r3
 8000836:	f002 fe6d 	bl	8003514 <memcpy>
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	401a      	ands	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60da      	str	r2, [r3, #12]
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000854:	b004      	add	sp, #16
 8000856:	4770      	bx	lr

08000858 <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

u8 ring_buffer_dequeue(ring_buffer_t *buffer, data_buffer_t *data) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff97 	bl	8000796 <ring_buffer_is_empty>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 800086e:	2300      	movs	r3, #0
 8000870:	e019      	b.n	80008a6 <ring_buffer_dequeue+0x4e>
  }

  *data = buffer->buffer[buffer->tail_index];
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800088e:	461a      	mov	r2, r3
 8000890:	f002 fe40 	bl	8003514 <memcpy>
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	401a      	ands	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	609a      	str	r2, [r3, #8]
  return 1;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <FLASH_read>:

extern u8 cur_mode;
extern __TYPE_CONFIG MODULE_CONFIG;

void FLASH_read()
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	MODULE_CONFIG = *(__IO __TYPE_CONFIG*)(CONFIG_ADDRESS);
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <FLASH_read+0x18>)
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <FLASH_read+0x1c>)
 80008b8:	8811      	ldrh	r1, [r2, #0]
 80008ba:	7892      	ldrb	r2, [r2, #2]
 80008bc:	8019      	strh	r1, [r3, #0]
 80008be:	709a      	strb	r2, [r3, #2]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	0801fc00 	.word	0x0801fc00
 80008cc:	2000004c 	.word	0x2000004c

080008d0 <FLASH_write>:

void FLASH_write()
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80008d6:	f000 fd91 	bl	80013fc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Banks = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
	eraseInit.NbPages = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
	eraseInit.PageAddress = CONFIG_ADDRESS;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <FLASH_write+0x74>)
 80008e8:	60fb      	str	r3, [r7, #12]
	uint32_t PAGEError = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
	if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 80008ee:	463a      	mov	r2, r7
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fe73 	bl	80015e0 <HAL_FLASHEx_Erase>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <FLASH_write+0x34>
	{
	  HAL_FLASH_GetError ();
 8000900:	f000 fdb2 	bl	8001468 <HAL_FLASH_GetError>
	}
	uint32_t data = BUILD_U32(MODULE_CONFIG.type, MODULE_CONFIG.id, MODULE_CONFIG.baudrate, 0x00);
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <FLASH_write+0x78>)
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	041a      	lsls	r2, r3, #16
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <FLASH_write+0x78>)
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	4413      	add	r3, r2
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <FLASH_write+0x78>)
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	4413      	add	r3, r2
 8000918:	617b      	str	r3, [r7, #20]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CONFIG_ADDRESS, data) != HAL_OK)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2200      	movs	r2, #0
 800091e:	461c      	mov	r4, r3
 8000920:	4615      	mov	r5, r2
 8000922:	4622      	mov	r2, r4
 8000924:	462b      	mov	r3, r5
 8000926:	4907      	ldr	r1, [pc, #28]	; (8000944 <FLASH_write+0x74>)
 8000928:	2002      	movs	r0, #2
 800092a:	f000 fcf7 	bl	800131c <HAL_FLASH_Program>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <FLASH_write+0x68>
	{
	  HAL_FLASH_GetError ();
 8000934:	f000 fd98 	bl	8001468 <HAL_FLASH_GetError>
	}
	HAL_FLASH_Lock();
 8000938:	f000 fd86 	bl	8001448 <HAL_FLASH_Lock>
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bdb0      	pop	{r4, r5, r7, pc}
 8000944:	0801fc00 	.word	0x0801fc00
 8000948:	2000004c 	.word	0x2000004c

0800094c <processConnect>:
// service for process data
void processConnect(Packet_t packet)
{
 800094c:	b084      	sub	sp, #16
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	f107 0c10 	add.w	ip, r7, #16
 8000958:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	HAL_UART_Transmit(&huart1, (uint8_t*)&packet, sizeof(Packet_t), 1000);
	for(int i =0; i<10; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	e00b      	b.n	800097a <processConnect+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOC, LED_PIN_Pin);
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <processConnect+0x44>)
 8000968:	f001 f895 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800096c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000970:	f000 fb1e 	bl	8000fb0 <HAL_Delay>
	for(int i =0; i<10; i++)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b09      	cmp	r3, #9
 800097e:	ddf0      	ble.n	8000962 <processConnect+0x16>
	}
	//blink led in 3s
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800098c:	b004      	add	sp, #16
 800098e:	4770      	bx	lr
 8000990:	40011000 	.word	0x40011000

08000994 <processReadConfig>:

void processReadConfig(Packet_t packet)
{
 8000994:	b084      	sub	sp, #16
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
 800099a:	f107 0c08 	add.w	ip, r7, #8
 800099e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	FLASH_read();
 80009a2:	f7ff ff85 	bl	80008b0 <FLASH_read>
	packet.module = MODULE_CONFIG.type;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <processReadConfig+0x4c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	723b      	strb	r3, [r7, #8]
	packet.dataLength = 0x0002;
 80009ac:	2302      	movs	r3, #2
 80009ae:	817b      	strh	r3, [r7, #10]
	packet.data[0] = MODULE_CONFIG.id;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <processReadConfig+0x4c>)
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	733b      	strb	r3, [r7, #12]
	packet.data[1] = MODULE_CONFIG.baudrate;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <processReadConfig+0x4c>)
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	737b      	strb	r3, [r7, #13]
	packet.data[2] = BYTE_STOP;
 80009bc:	2323      	movs	r3, #35	; 0x23
 80009be:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t*)&packet, sizeof(Packet_t), 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <processReadConfig+0x50>)
 80009ce:	f001 ff55 	bl	800287c <HAL_UART_Transmit>
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b004      	add	sp, #16
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000004c 	.word	0x2000004c
 80009e4:	20000050 	.word	0x20000050

080009e8 <processConfig>:
void processConfig(Packet_t packet)
{
 80009e8:	b084      	sub	sp, #16
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	f107 0c08 	add.w	ip, r7, #8
 80009f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MODULE_CONFIG.type = packet.module;
 80009f6:	7a3a      	ldrb	r2, [r7, #8]
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <processConfig+0x50>)
 80009fa:	701a      	strb	r2, [r3, #0]
	MODULE_CONFIG.id = packet.data[0];
 80009fc:	7b3a      	ldrb	r2, [r7, #12]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <processConfig+0x50>)
 8000a00:	705a      	strb	r2, [r3, #1]
	MODULE_CONFIG.baudrate = packet.data[1];
 8000a02:	7b7a      	ldrb	r2, [r7, #13]
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <processConfig+0x50>)
 8000a06:	709a      	strb	r2, [r3, #2]
	Uart_SetBaudrate(MODULE_CONFIG.baudrate);
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <processConfig+0x50>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f8cd 	bl	8000bac <Uart_SetBaudrate>
	FLASH_write();
 8000a12:	f7ff ff5d 	bl	80008d0 <FLASH_write>
	packet.dataLength = 0x02;
 8000a16:	2302      	movs	r3, #2
 8000a18:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart1, (uint8_t*)&packet, sizeof(Packet_t), 1000);
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a22:	f107 0108 	add.w	r1, r7, #8
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <processConfig+0x54>)
 8000a28:	f001 ff28 	bl	800287c <HAL_UART_Transmit>
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a34:	b004      	add	sp, #16
 8000a36:	4770      	bx	lr
 8000a38:	2000004c 	.word	0x2000004c
 8000a3c:	20000050 	.word	0x20000050

08000a40 <processChangeMode>:
Packet_t processChangeMode()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0c4      	sub	sp, #272	; 0x110
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a4e:	6018      	str	r0, [r3, #0]
	Packet_t packet;
	packet.module = MODULE_CONFIG.type;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <processChangeMode+0x84>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a5c:	701a      	strb	r2, [r3, #0]
	packet.cmdWord = CHANGE_MODE;
 8000a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a66:	2203      	movs	r2, #3
 8000a68:	705a      	strb	r2, [r3, #1]
	packet.dataLength = 0x0001;
 8000a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a72:	2201      	movs	r2, #1
 8000a74:	805a      	strh	r2, [r3, #2]
	packet.data[0] = cur_mode;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <processChangeMode+0x88>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a82:	711a      	strb	r2, [r3, #4]
	packet.data[1] = BYTE_STOP;
 8000a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a8c:	2223      	movs	r2, #35	; 0x23
 8000a8e:	715a      	strb	r2, [r3, #5]
	return packet;
 8000a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f002 fd32 	bl	8003514 <memcpy>
}
 8000ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000004c 	.word	0x2000004c
 8000ac8:	2000132e 	.word	0x2000132e

08000acc <processSendDataRF>:

void processSendDataRF(Packet_t packet)
{
 8000acc:	b084      	sub	sp, #16
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	f107 0c08 	add.w	ip, r7, #8
 8000ad6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, (u8*)&packet, sizeof(Packet_t), 1000);
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <processSendDataRF+0x2c>)
 8000ae8:	f001 fec8 	bl	800287c <HAL_UART_Transmit>
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af4:	b004      	add	sp, #16
 8000af6:	4770      	bx	lr
 8000af8:	20000050 	.word	0x20000050

08000afc <processSendDataNC>:

void processSendDataNC(Packet_t packet)
{
 8000afc:	b084      	sub	sp, #16
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	f107 0c08 	add.w	ip, r7, #8
 8000b06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, packet.data, packet.dataLength, 1000);
 8000b0a:	897a      	ldrh	r2, [r7, #10]
 8000b0c:	f107 010c 	add.w	r1, r7, #12
 8000b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <processSendDataNC+0x2c>)
 8000b16:	f001 feb1 	bl	800287c <HAL_UART_Transmit>
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b22:	b004      	add	sp, #16
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000098 	.word	0x20000098

08000b2c <Match_Baudrate>:

uint32_t Match_Baudrate(uint8_t baudrate)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	switch(baudrate)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d830      	bhi.n	8000b9e <Match_Baudrate+0x72>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <Match_Baudrate+0x18>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b69 	.word	0x08000b69
 8000b48:	08000b6f 	.word	0x08000b6f
 8000b4c:	08000b75 	.word	0x08000b75
 8000b50:	08000b7b 	.word	0x08000b7b
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b87 	.word	0x08000b87
 8000b5c:	08000b8d 	.word	0x08000b8d
 8000b60:	08000b93 	.word	0x08000b93
 8000b64:	08000b99 	.word	0x08000b99
	{
	case 0x00:
			return 300;
 8000b68:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b6c:	e018      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x01:
			return 1200;
 8000b6e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000b72:	e015      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x02:
			return 2400;
 8000b74:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000b78:	e012      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x03:
			return 4800;
 8000b7a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000b7e:	e00f      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x04:
			return 9600;
 8000b80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b84:	e00c      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x05:
			return 19200;
 8000b86:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000b8a:	e009      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x06:
			return 38400;
 8000b8c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b90:	e006      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x07:
			return 57600;
 8000b92:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b96:	e003      	b.n	8000ba0 <Match_Baudrate+0x74>
	case 0x08:
			return 115200;
 8000b98:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b9c:	e000      	b.n	8000ba0 <Match_Baudrate+0x74>
	default:
		return 0;
 8000b9e:	2300      	movs	r3, #0
	}
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <Uart_SetBaudrate>:

void Uart_SetBaudrate(uint8_t baudrate)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	uint32_t Baudrate = Match_Baudrate(baudrate);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffb7 	bl	8000b2c <Match_Baudrate>
 8000bbe:	60f8      	str	r0, [r7, #12]
	if(Baudrate != 0 && Baudrate != huart2.Init.BaudRate)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00f      	beq.n	8000be6 <Uart_SetBaudrate+0x3a>
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <Uart_SetBaudrate+0x44>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d00a      	beq.n	8000be6 <Uart_SetBaudrate+0x3a>
	{
	    huart2.Init.BaudRate = Baudrate;
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <Uart_SetBaudrate+0x44>)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6053      	str	r3, [r2, #4]
	    HAL_UART_Init(&huart2);
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <Uart_SetBaudrate+0x44>)
 8000bd8:	f001 fe00 	bl	80027dc <HAL_UART_Init>
	    HAL_UART_Receive_IT(&huart2, &nc_rx_payload, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <Uart_SetBaudrate+0x48>)
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <Uart_SetBaudrate+0x44>)
 8000be2:	f001 fece 	bl	8002982 <HAL_UART_Receive_IT>
	}
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	20000a05 	.word	0x20000a05

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0318 	add.w	r3, r7, #24
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <HAL_UART_MspInit+0x118>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d13a      	bne.n	8000cf2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a37      	ldr	r2, [pc, #220]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	482e      	ldr	r0, [pc, #184]	; (8000d7c <HAL_UART_MspInit+0x120>)
 8000cc2:	f000 fd35 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <HAL_UART_MspInit+0x120>)
 8000cdc:	f000 fd28 	bl	8001730 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f000 fa3c 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f000 fa55 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf0:	e03c      	b.n	8000d6c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d137      	bne.n	8000d6c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_UART_MspInit+0x11c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480f      	ldr	r0, [pc, #60]	; (8000d7c <HAL_UART_MspInit+0x120>)
 8000d40:	f000 fcf6 	bl	8001730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d44:	2308      	movs	r3, #8
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <HAL_UART_MspInit+0x120>)
 8000d58:	f000 fcea 	bl	8001730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2026      	movs	r0, #38	; 0x26
 8000d62:	f000 f9fe 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d66:	2026      	movs	r0, #38	; 0x26
 8000d68:	f000 fa17 	bl	800119a <HAL_NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013800 	.word	0x40013800
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40004400 	.word	0x40004400

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_InitTick+0xd0>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a2d      	ldr	r2, [pc, #180]	; (8000e54 <HAL_InitTick+0xd0>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_InitTick+0xd0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fa75 	bl	80022ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc2:	f001 fa5f 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8000dc6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_InitTick+0xd4>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <HAL_InitTick+0xd8>)
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_InitTick+0xdc>)
 8000dda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_InitTick+0xd8>)
 8000dde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_InitTick+0xd8>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_InitTick+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_InitTick+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_InitTick+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <HAL_InitTick+0xd8>)
 8000dfe:	f001 faa3 	bl	8002348 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11b      	bne.n	8000e48 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e10:	4812      	ldr	r0, [pc, #72]	; (8000e5c <HAL_InitTick+0xd8>)
 8000e12:	f001 faf1 	bl	80023f8 <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d111      	bne.n	8000e48 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e24:	2019      	movs	r0, #25
 8000e26:	f000 f9b8 	bl	800119a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d808      	bhi.n	8000e42 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2019      	movs	r0, #25
 8000e36:	f000 f994 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0xe0>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e002      	b.n	8000e48 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	20001330 	.word	0x20001330
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	20000024 	.word	0x20000024

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM1_UP_IRQHandler+0x10>)
 8000ebe:	f001 faed 	bl	800249c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20001330 	.word	0x20001330

08000ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART1_IRQHandler+0x10>)
 8000ed2:	f001 fd7b 	bl	80029cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000050 	.word	0x20000050

08000ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART2_IRQHandler+0x10>)
 8000ee6:	f001 fd71 	bl	80029cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000098 	.word	0x20000098

08000ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff fff8 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f06:	490c      	ldr	r1, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f1c:	4c09      	ldr	r4, [pc, #36]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 facf 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2e:	f7ff f9b1 	bl	8000294 <main>
  bx lr
 8000f32:	4770      	bx	lr
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f3c:	080035a8 	.word	0x080035a8
  ldr r2, =_sbss
 8000f40:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000f44:	200013a0 	.word	0x200013a0

08000f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_2_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x28>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x28>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f8f5 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f7ff ff0e 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fe46 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000028 	.word	0x20000028
 8000f98:	20001378 	.word	0x20001378

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20001378 	.word	0x20001378

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffe0 	bl	8000f9c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000028 	.word	0x20000028

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4906      	ldr	r1, [pc, #24]	; (8001090 <__NVIC_EnableIRQ+0x34>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff4f 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff64 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ffb2 	bl	80010e8 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff81 	bl	8001094 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff57 	bl	800105c <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d008      	beq.n	80011e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2204      	movs	r2, #4
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e020      	b.n	8001222 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 020e 	bic.w	r2, r2, #14
 80011ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d005      	beq.n	8001250 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e051      	b.n	80012f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020e 	bic.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <HAL_DMA_Abort_IT+0xd4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d029      	beq.n	80012ce <HAL_DMA_Abort_IT+0xa2>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <HAL_DMA_Abort_IT+0xd8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d022      	beq.n	80012ca <HAL_DMA_Abort_IT+0x9e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_DMA_Abort_IT+0xdc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d01a      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x98>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_DMA_Abort_IT+0xe0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d012      	beq.n	80012be <HAL_DMA_Abort_IT+0x92>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_DMA_Abort_IT+0xe4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00a      	beq.n	80012b8 <HAL_DMA_Abort_IT+0x8c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_DMA_Abort_IT+0xe8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d102      	bne.n	80012b2 <HAL_DMA_Abort_IT+0x86>
 80012ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b0:	e00e      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b6:	e00b      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	e008      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	e005      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	e002      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012ca:	2310      	movs	r3, #16
 80012cc:	e000      	b.n	80012d0 <HAL_DMA_Abort_IT+0xa4>
 80012ce:	2301      	movs	r3, #1
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_DMA_Abort_IT+0xec>)
 80012d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
    } 
  }
  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020008 	.word	0x40020008
 8001304:	4002001c 	.word	0x4002001c
 8001308:	40020030 	.word	0x40020030
 800130c:	40020044 	.word	0x40020044
 8001310:	40020058 	.word	0x40020058
 8001314:	4002006c 	.word	0x4002006c
 8001318:	40020000 	.word	0x40020000

0800131c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_FLASH_Program+0xd8>)
 8001338:	7e1b      	ldrb	r3, [r3, #24]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_FLASH_Program+0x26>
 800133e:	2302      	movs	r3, #2
 8001340:	e054      	b.n	80013ec <HAL_FLASH_Program+0xd0>
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_FLASH_Program+0xd8>)
 8001344:	2201      	movs	r2, #1
 8001346:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800134c:	f000 f8b2 	bl	80014b4 <FLASH_WaitForLastOperation>
 8001350:	4603      	mov	r3, r0
 8001352:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d144      	bne.n	80013e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d102      	bne.n	8001366 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001360:	2301      	movs	r3, #1
 8001362:	757b      	strb	r3, [r7, #21]
 8001364:	e007      	b.n	8001376 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d102      	bne.n	8001372 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800136c:	2302      	movs	r3, #2
 800136e:	757b      	strb	r3, [r7, #21]
 8001370:	e001      	b.n	8001376 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001372:	2304      	movs	r3, #4
 8001374:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001376:	2300      	movs	r3, #0
 8001378:	75bb      	strb	r3, [r7, #22]
 800137a:	e02d      	b.n	80013d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800137c:	7dbb      	ldrb	r3, [r7, #22]
 800137e:	005a      	lsls	r2, r3, #1
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	eb02 0c03 	add.w	ip, r2, r3
 8001386:	7dbb      	ldrb	r3, [r7, #22]
 8001388:	0119      	lsls	r1, r3, #4
 800138a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800138e:	f1c1 0620 	rsb	r6, r1, #32
 8001392:	f1a1 0020 	sub.w	r0, r1, #32
 8001396:	fa22 f401 	lsr.w	r4, r2, r1
 800139a:	fa03 f606 	lsl.w	r6, r3, r6
 800139e:	4334      	orrs	r4, r6
 80013a0:	fa23 f000 	lsr.w	r0, r3, r0
 80013a4:	4304      	orrs	r4, r0
 80013a6:	fa23 f501 	lsr.w	r5, r3, r1
 80013aa:	b2a3      	uxth	r3, r4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4660      	mov	r0, ip
 80013b0:	f000 f864 	bl	800147c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b8:	f000 f87c 	bl	80014b4 <FLASH_WaitForLastOperation>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_FLASH_Program+0xdc>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_FLASH_Program+0xdc>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80013d2:	7dbb      	ldrb	r3, [r7, #22]
 80013d4:	3301      	adds	r3, #1
 80013d6:	75bb      	strb	r3, [r7, #22]
 80013d8:	7dba      	ldrb	r2, [r7, #22]
 80013da:	7d7b      	ldrb	r3, [r7, #21]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3cd      	bcc.n	800137c <HAL_FLASH_Program+0x60>
 80013e0:	e000      	b.n	80013e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80013e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_FLASH_Program+0xd8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	761a      	strb	r2, [r3, #24]

  return status;
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	20001380 	.word	0x20001380
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_FLASH_Unlock+0x40>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_FLASH_Unlock+0x40>)
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_FLASH_Unlock+0x44>)
 8001416:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_FLASH_Unlock+0x40>)
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_FLASH_Unlock+0x48>)
 800141c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_FLASH_Unlock+0x40>)
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800142e:	79fb      	ldrb	r3, [r7, #7]
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000
 8001440:	45670123 	.word	0x45670123
 8001444:	cdef89ab 	.word	0xcdef89ab

08001448 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_FLASH_Lock+0x1c>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_FLASH_Lock+0x1c>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_FLASH_GetError+0x10>)
 800146e:	69db      	ldr	r3, [r3, #28]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20001380 	.word	0x20001380

0800147c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <FLASH_Program_HalfWord+0x30>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <FLASH_Program_HalfWord+0x34>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <FLASH_Program_HalfWord+0x34>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	887a      	ldrh	r2, [r7, #2]
 800149e:	801a      	strh	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20001380 	.word	0x20001380
 80014b0:	40022000 	.word	0x40022000

080014b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fd6e 	bl	8000f9c <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014c2:	e010      	b.n	80014e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ca:	d00c      	beq.n	80014e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <FLASH_WaitForLastOperation+0x2e>
 80014d2:	f7ff fd63 	bl	8000f9c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d201      	bcs.n	80014e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e025      	b.n	8001532 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e8      	bne.n	80014c4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 8001500:	2220      	movs	r2, #32
 8001502:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <FLASH_WaitForLastOperation+0x88>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001528:	f000 f80a 	bl	8001540 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000

08001540 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 8001560:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 8001580:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <FLASH_SetErrorCode+0x9c>)
 80015a0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f240 1201 	movw	r2, #257	; 0x101
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d106      	bne.n	80015c6 <FLASH_SetErrorCode+0x86>
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	61d3      	str	r3, [r2, #28]
}  
 80015c4:	e002      	b.n	80015cc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <FLASH_SetErrorCode+0x98>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60d3      	str	r3, [r2, #12]
}  
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000
 80015dc:	20001380 	.word	0x20001380

080015e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_FLASHEx_Erase+0xd0>)
 80015f4:	7e1b      	ldrb	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_FLASHEx_Erase+0x1e>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e053      	b.n	80016a6 <HAL_FLASHEx_Erase+0xc6>
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_FLASHEx_Erase+0xd0>)
 8001600:	2201      	movs	r2, #1
 8001602:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d116      	bne.n	800163a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f7ff ff50 	bl	80014b4 <FLASH_WaitForLastOperation>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d141      	bne.n	800169e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800161a:	2001      	movs	r0, #1
 800161c:	f000 f84c 	bl	80016b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001620:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001624:	f7ff ff46 	bl	80014b4 <FLASH_WaitForLastOperation>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_FLASHEx_Erase+0xd4>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_FLASHEx_Erase+0xd4>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6113      	str	r3, [r2, #16]
 8001638:	e031      	b.n	800169e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800163a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800163e:	f7ff ff39 	bl	80014b4 <FLASH_WaitForLastOperation>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d12a      	bne.n	800169e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f04f 32ff 	mov.w	r2, #4294967295
 800164e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	e019      	b.n	800168c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f000 f849 	bl	80016f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800165e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001662:	f7ff ff27 	bl	80014b4 <FLASH_WaitForLastOperation>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_FLASHEx_Erase+0xd4>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_FLASHEx_Erase+0xd4>)
 8001670:	f023 0302 	bic.w	r3, r3, #2
 8001674:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	601a      	str	r2, [r3, #0]
            break;
 8001682:	e00c      	b.n	800169e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800168a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	029a      	lsls	r2, r3, #10
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3dc      	bcc.n	8001658 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_FLASHEx_Erase+0xd0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	761a      	strb	r2, [r3, #24]

  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001380 	.word	0x20001380
 80016b4:	40022000 	.word	0x40022000

080016b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <FLASH_MassErase+0x30>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <FLASH_MassErase+0x34>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <FLASH_MassErase+0x34>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <FLASH_MassErase+0x34>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <FLASH_MassErase+0x34>)
 80016d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016dc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20001380 	.word	0x20001380
 80016ec:	40022000 	.word	0x40022000

080016f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <FLASH_PageErase+0x38>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <FLASH_PageErase+0x3c>)
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <FLASH_PageErase+0x3c>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <FLASH_PageErase+0x3c>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <FLASH_PageErase+0x3c>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <FLASH_PageErase+0x3c>)
 8001716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20001380 	.word	0x20001380
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e169      	b.n	8001a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001744:	2201      	movs	r2, #1
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8158 	bne.w	8001a12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a9a      	ldr	r2, [pc, #616]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800176c:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d875      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001772:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d058      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001778:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d86f      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800177e:	4a96      	ldr	r2, [pc, #600]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d052      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001784:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d869      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800178a:	4a94      	ldr	r2, [pc, #592]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d04c      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001790:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d863      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001796:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d046      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800179c:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d85d      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d82a      	bhi.n	80017fc <HAL_GPIO_Init+0xcc>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d859      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_GPIO_Init+0x80>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001817 	.word	0x08001817
 80017bc:	08001859 	.word	0x08001859
 80017c0:	0800185f 	.word	0x0800185f
 80017c4:	0800185f 	.word	0x0800185f
 80017c8:	0800185f 	.word	0x0800185f
 80017cc:	0800185f 	.word	0x0800185f
 80017d0:	0800185f 	.word	0x0800185f
 80017d4:	0800185f 	.word	0x0800185f
 80017d8:	0800185f 	.word	0x0800185f
 80017dc:	0800185f 	.word	0x0800185f
 80017e0:	0800185f 	.word	0x0800185f
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	0800185f 	.word	0x0800185f
 80017ec:	0800185f 	.word	0x0800185f
 80017f0:	0800185f 	.word	0x0800185f
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	08001821 	.word	0x08001821
 80017fc:	4a79      	ldr	r2, [pc, #484]	; (80019e4 <HAL_GPIO_Init+0x2b4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001802:	e02c      	b.n	800185e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e029      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e024      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3308      	adds	r3, #8
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e01f      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	330c      	adds	r3, #12
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e01a      	b.n	8001860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	2304      	movs	r3, #4
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e013      	b.n	8001860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	611a      	str	r2, [r3, #16]
          break;
 800184a:	e009      	b.n	8001860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	615a      	str	r2, [r3, #20]
          break;
 8001856:	e003      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x130>
          break;
 800185e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d801      	bhi.n	800186a <HAL_GPIO_Init+0x13a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e001      	b.n	800186e <HAL_GPIO_Init+0x13e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d802      	bhi.n	800187c <HAL_GPIO_Init+0x14c>
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	e002      	b.n	8001882 <HAL_GPIO_Init+0x152>
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3b08      	subs	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	210f      	movs	r1, #15
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80b1 	beq.w	8001a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x2c0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x1ec>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3f      	ldr	r2, [pc, #252]	; (80019f4 <HAL_GPIO_Init+0x2c4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x1e8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3e      	ldr	r2, [pc, #248]	; (80019f8 <HAL_GPIO_Init+0x2c8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x1e4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x1e0>
 800190c:	2303      	movs	r3, #3
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001910:	2304      	movs	r3, #4
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 800191c:	2300      	movs	r3, #0
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192e:	492f      	ldr	r1, [pc, #188]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	492c      	ldr	r1, [pc, #176]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4928      	ldr	r1, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4922      	ldr	r1, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4914      	ldr	r1, [pc, #80]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e021      	b.n	8001a12 <HAL_GPIO_Init+0x2e2>
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae8e 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	372c      	adds	r7, #44	; 0x2c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e272      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e24c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f9fa 	bl	8000f9c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9f6 	bl	8000f9c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e200      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f9e6 	bl	8000f9c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f9e2 	bl	8000f9c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1ec      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f99b 	bl	8000f9c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f997 	bl	8000f9c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f97a 	bl	8000f9c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f976 	bl	8000f9c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e180      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f95a 	bl	8000f9c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f956 	bl	8000f9c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e160      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fafe 	bl	800230c <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff f940 	bl	8000f9c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff f93c 	bl	8000f9c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e146      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a87      	ldr	r2, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f8fd 	bl	8000f9c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff f8f9 	bl	8000f9c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e103      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a69      	ldr	r2, [pc, #420]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a66      	ldr	r2, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a60      	ldr	r2, [pc, #384]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b5e      	ldr	r3, [pc, #376]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a5d      	ldr	r2, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f8ad 	bl	8000f9c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff f8a9 	bl	8000f9c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0b1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff f897 	bl	8000f9c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff f893 	bl	8000f9c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e09b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8087 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff f867 	bl	8000f9c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff f863 	bl	8000f9c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e06d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4921      	ldr	r1, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f837 	bl	8000f9c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff f833 	bl	8000f9c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e035      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f820 	bl	8000f9c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f81c 	bl	8000f9c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e026      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e01e      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e019      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4965      	ldr	r1, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800204a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d040      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e073      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4936      	ldr	r1, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe ff6e 	bl	8000f9c <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe ff6a 	bl	8000f9c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e053      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d210      	bcs.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4922      	ldr	r1, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1cc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1d0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fe02 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	08003574 	.word	0x08003574
 8002198:	20000020 	.word	0x20000020
 800219c:	20000024 	.word	0x20000024

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_GetSysClockFreq+0x94>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ce:	e027      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	613b      	str	r3, [r7, #16]
      break;
 80021d4:	e027      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d010      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0c5b      	lsrs	r3, r3, #17
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e004      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	613b      	str	r3, [r7, #16]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	613b      	str	r3, [r7, #16]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	693b      	ldr	r3, [r7, #16]
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	007a1200 	.word	0x007a1200
 800223c:	0800358c 	.word	0x0800358c
 8002240:	0800359c 	.word	0x0800359c
 8002244:	003d0900 	.word	0x003d0900

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <HAL_RCC_GetHCLKFreq+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000020 	.word	0x20000020

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff2 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08003584 	.word	0x08003584

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffde 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08003584 	.word	0x08003584

080022ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	220f      	movs	r2, #15
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0207 	and.w	r2, r3, #7
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	40022000 	.word	0x40022000

0800230c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <RCC_Delay+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <RCC_Delay+0x38>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0a5b      	lsrs	r3, r3, #9
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002328:	bf00      	nop
  }
  while (Delay --);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	60fa      	str	r2, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <RCC_Delay+0x1c>
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000020 	.word	0x20000020
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e041      	b.n	80023de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f839 	bl	80023e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f000 f9b4 	bl	80026f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e03a      	b.n	8002486 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_TIM_Base_Start_IT+0x98>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d009      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_TIM_Base_Start_IT+0x9c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_TIM_Base_Start_IT+0xa0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d010      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	e007      	b.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800

0800249c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0202 	mvn.w	r2, #2
 80024c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8ed 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8e0 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8ef 	bl	80026d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0204 	mvn.w	r2, #4
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f8c3 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8b6 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f8c5 	bl	80026d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b08      	cmp	r3, #8
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b08      	cmp	r3, #8
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0208 	mvn.w	r2, #8
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2204      	movs	r2, #4
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f899 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f88c 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f89b 	bl	80026d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0210 	mvn.w	r2, #16
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2208      	movs	r2, #8
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f86f 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f862 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f871 	bl	80026d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0201 	mvn.w	r2, #1
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe f8a4 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b80      	cmp	r3, #128	; 0x80
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8bf 	bl	80027ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f835 	bl	80026e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b20      	cmp	r3, #32
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0220 	mvn.w	r2, #32
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f88a 	bl	80027b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a29      	ldr	r2, [pc, #164]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <TIM_Base_SetConfig+0xbc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <TIM_Base_SetConfig+0xc0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <TIM_Base_SetConfig+0xbc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <TIM_Base_SetConfig+0xc0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d103      	bne.n	800279c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800

080027b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e042      	b.n	8002874 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fa2a 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fdc5 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d16d      	bne.n	8002978 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Transmit+0x2c>
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e066      	b.n	800297a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fb6f 	bl	8000f9c <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d108      	bne.n	80028e8 <HAL_UART_Transmit+0x6c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e003      	b.n	80028f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028f0:	e02a      	b.n	8002948 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fb14 	bl	8002f2a <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e036      	b.n	800297a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	3302      	adds	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	e007      	b.n	800293a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1cf      	bne.n	80028f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fae4 	bl	8002f2a <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e006      	b.n	800297a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	4613      	mov	r3, r2
 800298e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d112      	bne.n	80029c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Receive_IT+0x26>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00b      	b.n	80029c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fb24 	bl	8003006 <UART_Start_Receive_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0ba      	sub	sp, #232	; 0xe8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_UART_IRQHandler+0x66>
 8002a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fc01 	bl	8003232 <UART_Receive_IT>
      return;
 8002a30:	e25b      	b.n	8002eea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80de 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x22c>
 8002a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80d1 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xae>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_UART_IRQHandler+0xd2>
 8002a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xf6>
 8002aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <HAL_UART_IRQHandler+0x126>
 8002ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0208 	orr.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 81f2 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_UART_IRQHandler+0x14e>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fb8c 	bl	8003232 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_UART_IRQHandler+0x17a>
 8002b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04f      	beq.n	8002be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa96 	bl	8003078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d041      	beq.n	8002bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3314      	adds	r3, #20
 8002b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1d9      	bne.n	8002b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_UART_IRQHandler+0x3e0>)
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fb36 	bl	800122c <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00e      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f993 	bl	8002f02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e00a      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f98f 	bl	8002f02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e006      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f98b 	bl	8002f02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002bf2:	e175      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	bf00      	nop
    return;
 8002bf6:	e173      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 814f 	bne.w	8002ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8148 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8141 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80b6 	beq.w	8002db0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8145 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c62:	429a      	cmp	r2, r3
 8002c64:	f080 813e 	bcs.w	8002ee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f000 8088 	beq.w	8002d8c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ca8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1d9      	bne.n	8002c7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e1      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e3      	bne.n	8002d04 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5c:	f023 0310 	bic.w	r3, r3, #16
 8002d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e3      	bne.n	8002d4a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fa15 	bl	80011b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8b6 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da8:	e09c      	b.n	8002ee4 <HAL_UART_IRQHandler+0x518>
 8002daa:	bf00      	nop
 8002dac:	0800313d 	.word	0x0800313d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 808e 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8089 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e32:	633a      	str	r2, [r7, #48]	; 0x30
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	617b      	str	r3, [r7, #20]
   return(result);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e3      	bne.n	8002e54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f83b 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9e:	e023      	b.n	8002ee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x4f4>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f953 	bl	8003164 <UART_Transmit_IT>
    return;
 8002ebe:	e014      	b.n	8002eea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <HAL_UART_IRQHandler+0x51e>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f992 	bl	8003202 <UART_EndTransmit_IT>
    return;
 8002ede:	e004      	b.n	8002eea <HAL_UART_IRQHandler+0x51e>
    return;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_UART_IRQHandler+0x51e>
      return;
 8002ee8:	bf00      	nop
  }
}
 8002eea:	37e8      	adds	r7, #232	; 0xe8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b090      	sub	sp, #64	; 0x40
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3a:	e050      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d04c      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	f7fe f827 	bl	8000f9c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d241      	bcs.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e5      	bne.n	8002f5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fae:	623a      	str	r2, [r7, #32]
 8002fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	69f9      	ldr	r1, [r7, #28]
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e5      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d09f      	beq.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3740      	adds	r7, #64	; 0x40
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	4613      	mov	r3, r2
 8003012:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2222      	movs	r2, #34	; 0x22
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b095      	sub	sp, #84	; 0x54
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a0:	643a      	str	r2, [r7, #64]	; 0x40
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e5      	bne.n	8003080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	e853 3f00 	ldrex	r3, [r3]
 80030c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3314      	adds	r3, #20
 80030d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e5      	bne.n	80030b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d119      	bne.n	8003124 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003110:	61ba      	str	r2, [r7, #24]
 8003112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	6979      	ldr	r1, [r7, #20]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	613b      	str	r3, [r7, #16]
   return(result);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003132:	bf00      	nop
 8003134:	3754      	adds	r7, #84	; 0x54
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fed3 	bl	8002f02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b21      	cmp	r3, #33	; 0x21
 8003176:	d13e      	bne.n	80031f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d114      	bne.n	80031ac <UART_Transmit_IT+0x48>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d110      	bne.n	80031ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	e008      	b.n	80031be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6211      	str	r1, [r2, #32]
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4619      	mov	r1, r3
 80031cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003218:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fe64 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08c      	sub	sp, #48	; 0x30
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b22      	cmp	r3, #34	; 0x22
 8003244:	f040 80ae 	bne.w	80033a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d117      	bne.n	8003282 <UART_Receive_IT+0x50>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d113      	bne.n	8003282 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	b29a      	uxth	r2, r3
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	e026      	b.n	80032d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d007      	beq.n	80032a6 <UART_Receive_IT+0x74>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <UART_Receive_IT+0x82>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e008      	b.n	80032c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29b      	uxth	r3, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4619      	mov	r1, r3
 80032de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d15d      	bne.n	80033a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0220 	bic.w	r2, r2, #32
 80032f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003302:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	2b01      	cmp	r3, #1
 8003328:	d135      	bne.n	8003396 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	613b      	str	r3, [r7, #16]
   return(result);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f023 0310 	bic.w	r3, r3, #16
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	623a      	str	r2, [r7, #32]
 8003352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	69f9      	ldr	r1, [r7, #28]
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	61bb      	str	r3, [r7, #24]
   return(result);
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e5      	bne.n	8003330 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d10a      	bne.n	8003388 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fdc0 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
 8003394:	e002      	b.n	800339c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd f8ee 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e002      	b.n	80033a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033ea:	f023 030c 	bic.w	r3, r3, #12
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <UART_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7fe ff34 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	e002      	b.n	8003426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe ff1c 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	0119      	lsls	r1, r3, #4
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fbb2 f2f3 	udiv	r2, r2, r3
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <UART_SetConfig+0x118>)
 800345e:	fba3 0302 	umull	r0, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2064      	movs	r0, #100	; 0x64
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <UART_SetConfig+0x118>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	4419      	add	r1, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <UART_SetConfig+0x118>)
 8003496:	fba3 0302 	umull	r0, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2064      	movs	r0, #100	; 0x64
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	440a      	add	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40013800 	.word	0x40013800
 80034c8:	51eb851f 	.word	0x51eb851f

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f000 f830 	bl	8003540 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	080035a0 	.word	0x080035a0
 8003508:	080035a0 	.word	0x080035a0
 800350c:	080035a0 	.word	0x080035a0
 8003510:	080035a4 	.word	0x080035a4

08003514 <memcpy>:
 8003514:	440a      	add	r2, r1
 8003516:	4291      	cmp	r1, r2
 8003518:	f100 33ff 	add.w	r3, r0, #4294967295
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	4770      	bx	lr
 8003520:	b510      	push	{r4, lr}
 8003522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003526:	4291      	cmp	r1, r2
 8003528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352c:	d1f9      	bne.n	8003522 <memcpy+0xe>
 800352e:	bd10      	pop	{r4, pc}

08003530 <memset>:
 8003530:	4603      	mov	r3, r0
 8003532:	4402      	add	r2, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
